version: '3'
services:

# ==== Kafka Services ====
  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - 2181:2181
    volumes:
      - zookeeper-volume:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - pipeline-network

  kafka:
    container_name: kafka
    restart: always
    image: docker.io/bitnami/kafka:3.3
    ports:
      - 9093:9093
    volumes:
      - kafka-volume:/bitnami
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_MESSAGE_MAX_BYTES=20000000
    networks:
      - pipeline-network
    depends_on:
      - zookeeper

  kafka-ui:
    restart: always
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8083:8080
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=pipeline_pundits
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - pipeline-network
    depends_on:
      - kafka

  # ==== Spark Services ===

  spark-runner:
    container_name: spark-runner
    build: Spark_Processing
    # command: sh -c "spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.1 new_spark.py"
    command: sh -c "spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.1 Spark_Filtering.py"
    environment:
      - KAFKA_BROKER_SERVER=kafka:9092
    networks:
      - pipeline-network
  
  # ==== ticker Services ====

  ticker_1:
    build: kafka-server
    container_name: ticker_1
    networks:
      - pipeline-network
    command: sh -c "python3 kafka_launcher.py"
    environment:
      - KAFKA_BROKER_SERVER=kafka:9092
      - TICKER=NVDA
  ticker_2:
    build: kafka-server
    container_name: ticker_2
    networks:
      - pipeline-network
    command: sh -c "python3 kafka_launcher.py"
    environment:
      - KAFKA_BROKER_SERVER=kafka:9092
      - TICKER=AAPL

  # ==== Database Services ====
  db:
    container_name: db
    build: DB
    ports:
      - "5432:5432"
    networks:
      - pipeline-network

  # ==== Backend Services ====
  backend:
    container_name: back-end
    build: server
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    environment:
      - DB_IP=db
      - DB_PORT=5432
    networks:
      - pipeline-network
    depends_on:
      - db

  # ==== Frontend Services ====
  client:
    container_name: webapp
    build: webapp
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - pipeline-network

volumes:
  kafka-volume:
  zookeeper-volume:

networks:
  pipeline-network: {}
